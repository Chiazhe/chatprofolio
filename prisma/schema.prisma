// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Education      Education[]
  WorkExperience Experience[]
  Project        Project[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Education {
  id              Int       @id @default(autoincrement())
  institution     String
  degree          String
  fieldOfStudy    String
  specialization  String[]
  relevantCourses String[]
  grade           String?
  startDate       DateTime?
  endDate         DateTime?
  holder          User      @relation(fields: [holderId], references: [id])
  holderId        String

  @@index([holderId])
  @@map("education")
}

model Experience {
  id              Int       @id @default(autoincrement())
  companyName     String
  title           String
  workDescription String[]
  skillUsed       String[]
  companyLogo     String?
  startDate       DateTime?
  endDate         DateTime?
  holder          User      @relation(fields: [holderId], references: [id])
  holderId        String

  @@index([holderId])
  @@map("experience")
}

model Project {
  id                 Int       @id @default(autoincrement())
  projectTitle       String
  projectDescription String[]
  projectUrl         String?
  githubLink         String?
  projectImage       String?
  technologyUsed     String[]
  startDate          DateTime?
  endDate            DateTime?
  holder             User      @relation(fields: [holderId], references: [id])
  holderId           String

  @@index([holderId])
  @@map("project")
}
